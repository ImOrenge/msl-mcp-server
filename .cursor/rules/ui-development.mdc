---
description:
globs:
alwaysApply: false
---
# WPF UI 개발 가이드

## 🎨 UI 아키텍처 개요
VoiceMacro Pro는 C# WPF를 사용한 모던한 데스크톱 애플리케이션으로, 사이드바 네비게이션과 컨텐츠 영역으로 구성되어 있습니다.

## 🏗️ 메인 윈도우 구조

### 메인 윈도우
- **MainWindow**: [VoiceMacroPro/MainWindow.xaml](mdc:VoiceMacroPro/MainWindow.xaml)
- **코드 비하인드**: [VoiceMacroPro/MainWindow.xaml.cs](mdc:VoiceMacroPro/MainWindow.xaml.cs)

### 레이아웃 구조
```
┌─────────────────────────────────────────┐
│ MainWindow (1400x800)                   │
├─────────┬───────────────────────────────┤
│ Sidebar │ Main Content Area             │
│ (280px) │ ┌─────────────────────────────┤
│         │ │ Header (페이지 제목/검색)     │
│ 메뉴    │ ├─────────────────────────────┤
│ 항목들  │ │ Content Container           │
│         │ │ (동적 뷰 로딩 영역)          │
│         │ ├─────────────────────────────┤
│         │ │ Status Bar (상태 정보)      │
└─────────┴─────────────────────────────────┘
```

## 📱 뷰 컴포넌트들

### 주요 뷰 파일들
- **대시보드**: [VoiceMacroPro/Views/DashboardView.xaml](mdc:VoiceMacroPro/Views/DashboardView.xaml)
- **매크로 관리**: [VoiceMacroPro/Views/MacroManagementView.xaml](mdc:VoiceMacroPro/Views/MacroManagementView.xaml)
- **음성 인식**: [VoiceMacroPro/Views/VoiceRecognitionView.xaml](mdc:VoiceMacroPro/Views/VoiceRecognitionView.xaml)
- **커스텀 스크립팅**: [VoiceMacroPro/Views/CustomScriptingView.xaml](mdc:VoiceMacroPro/Views/CustomScriptingView.xaml)
- **로그 모니터링**: [VoiceMacroPro/Views/LogMonitoringView.xaml](mdc:VoiceMacroPro/Views/LogMonitoringView.xaml)
- **프리셋 관리**: [VoiceMacroPro/Views/PresetManagementView.xaml](mdc:VoiceMacroPro/Views/PresetManagementView.xaml)
- **개발자 정보**: [VoiceMacroPro/Views/DeveloperInfoView.xaml](mdc:VoiceMacroPro/Views/DeveloperInfoView.xaml)

### 뷰 네비게이션 패턴
```csharp
// MainWindow.xaml.cs의 네비게이션 메서드
private void NavigateToSection(object sender, RoutedEventArgs e)
{
    Button button = sender as Button;
    string section = button?.Tag?.ToString();
    
    switch (section)
    {
        case "Dashboard":
            LoadView(new DashboardView());
            break;
        case "MacroManagement":
            LoadView(new MacroManagementView());
            break;
        // ... 기타 섹션들
    }
}
```

## 🎨 디자인 시스템

### 색상 팔레트
- **주요 색상**: #4285F4 (Google Blue)
- **그라디언트**: #4285F4 → #1E3A8A
- **배경색**: #F8F9FA (Light Gray)
- **텍스트색**: #1A202C (Dark Gray)
- **성공색**: #38A169 (Green)
- **오류색**: #DC3545 (Red)

### 타이포그래피
- **헤더**: FontSize="24", FontWeight="Bold"
- **서브헤더**: FontSize="18", FontWeight="SemiBold"
- **본문**: FontSize="14", FontWeight="Normal"
- **캡션**: FontSize="12", FontWeight="Normal"

### 스타일 가이드
```xaml
<!-- 사이드바 메뉴 버튼 스타일 -->
<Style x:Key="SidebarMenuButtonStyle" TargetType="Button">
    <Setter Property="Background" Value="Transparent"/>
    <Setter Property="Foreground" Value="White"/>
    <Setter Property="BorderThickness" Value="0"/>
    <Setter Property="Padding" Value="20,15"/>
    <!-- 호버 효과: #5A9BF8 -->
    <!-- 활성 효과: #2563EB -->
</Style>

<!-- 헤더 아이콘 버튼 스타일 -->
<Style x:Key="HeaderIconButtonStyle" TargetType="Button">
    <Setter Property="Background" Value="#F7FAFC"/>
    <Setter Property="BorderBrush" Value="#E2E8F0"/>
    <Setter Property="Width" Value="40"/>
    <Setter Property="Height" Value="40"/>
</Style>
```

## 🔧 공통 UI 유틸리티

### UIHelper 클래스
- **파일 위치**: [VoiceMacroPro/Utils/UIHelper.cs](mdc:VoiceMacroPro/Utils/UIHelper.cs)
- **주요 기능**:
  - 메시지 박스 표시
  - 확인 대화상자
  - 로딩 표시
  - 오류 알림

### 사용 예시
```csharp
// 성공 메시지
UIHelper.ShowSuccess("매크로가 성공적으로 저장되었습니다.");

// 오류 메시지
UIHelper.ShowError("서버 연결에 실패했습니다.");

// 확인 대화상자
if (UIHelper.ShowConfirm("정말로 삭제하시겠습니까?"))
{
    // 삭제 로직
}

// 로딩 표시
UIHelper.ShowLoading("데이터를 불러오는 중...");
```

## 📊 데이터 바인딩 패턴

### MVVM 패턴 (향후 적용 예정)
```csharp
// 뷰모델 예시
public class MacroManagementViewModel : INotifyPropertyChanged
{
    private ObservableCollection<Macro> _macros;
    public ObservableCollection<Macro> Macros
    {
        get => _macros;
        set
        {
            _macros = value;
            OnPropertyChanged();
        }
    }
    
    public ICommand AddMacroCommand { get; set; }
    public ICommand DeleteMacroCommand { get; set; }
}
```

### 데이터 그리드 바인딩
```xaml
<DataGrid Name="MacrosDataGrid" 
          ItemsSource="{Binding Macros}"
          SelectedItem="{Binding SelectedMacro}"
          AutoGenerateColumns="False">
    <DataGrid.Columns>
        <DataGridTextColumn Header="이름" Binding="{Binding Name}"/>
        <DataGridTextColumn Header="음성 명령" Binding="{Binding VoiceCommand}"/>
        <DataGridTextColumn Header="생성일" Binding="{Binding CreatedAt}"/>
    </DataGrid.Columns>
</DataGrid>
```

## 🎯 반응형 UI 패턴

### 윈도우 크기 적응
```xaml
<!-- 그리드 컬럼 크기 자동 조정 -->
<Grid.ColumnDefinitions>
    <ColumnDefinition Width="280"/>        <!-- 고정 사이드바 -->
    <ColumnDefinition Width="*"/>          <!-- 가변 컨텐츠 영역 -->
</Grid.ColumnDefinitions>

<!-- 컨텐츠 영역 내부 반응형 레이아웃 -->
<Grid>
    <Grid.ColumnDefinitions>
        <ColumnDefinition Width="2*"/>    <!-- 메인 컨텐츠 (66%) -->
        <ColumnDefinition Width="1*"/>    <!-- 사이드 패널 (33%) -->
    </Grid.ColumnDefinitions>
</Grid>
```

### 애니메이션 및 전환 효과
```xaml
<!-- 버튼 호버 애니메이션 -->
<Button.Style>
    <Style TargetType="Button">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ColorAnimation 
                                Storyboard.TargetProperty="(Button.Background).(SolidColorBrush.Color)"
                                To="#5A9BF8" Duration="0:0:0.2"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
            </Trigger>
        </Style.Triggers>
    </Style>
</Button.Style>
```

## 🚨 UI 오류 처리

### 사용자 피드백 패턴
```csharp
private async void LoadMacros()
{
    try
    {
        UIHelper.ShowLoading("매크로 목록을 불러오는 중...");
        
        var macros = await ApiService.GetMacrosAsync();
        MacrosDataGrid.ItemsSource = macros;
        
        UIHelper.HideLoading();
        UIHelper.ShowSuccess($"{macros.Count}개의 매크로를 불러왔습니다.");
    }
    catch (Exception ex)
    {
        UIHelper.HideLoading();
        UIHelper.ShowError($"매크로 목록 불러오기 실패: {ex.Message}");
    }
}
```

### 입력 유효성 검사
```csharp
private bool ValidateInput()
{
    if (string.IsNullOrWhiteSpace(MacroNameTextBox.Text))
    {
        UIHelper.ShowError("매크로 이름을 입력해주세요.");
        MacroNameTextBox.Focus();
        return false;
    }
    
    if (string.IsNullOrWhiteSpace(VoiceCommandTextBox.Text))
    {
        UIHelper.ShowError("음성 명령어를 입력해주세요.");
        VoiceCommandTextBox.Focus();
        return false;
    }
    
    return true;
}
```

## 🔧 성능 최적화

### 가상화 사용
```xaml
<!-- 대용량 데이터 표시 시 가상화 사용 -->
<DataGrid VirtualizingPanel.IsVirtualizing="True"
          VirtualizingPanel.VirtualizationMode="Recycling"
          EnableRowVirtualization="True">
</DataGrid>
```

### 리소스 관리
```csharp
// IDisposable 구현으로 리소스 정리
public partial class MacroManagementView : UserControl, IDisposable
{
    public void Dispose()
    {
        // 이벤트 핸들러 해제
        // 타이머 정지
        // 기타 리소스 정리
    }
}
```

## 📚 UI 개발 체크리스트

### 새 뷰 추가 시
- [ ] XAML 파일에 기본 레이아웃 구성
- [ ] 코드 비하인드에 이벤트 핸들러 추가
- [ ] MainWindow에 네비게이션 로직 추가
- [ ] API 서비스 통합
- [ ] 오류 처리 및 사용자 피드백 구현
- [ ] 로딩 상태 표시
- [ ] 반응형 레이아웃 확인

### UI/UX 품질 기준
- [ ] 일관된 디자인 시스템 적용
- [ ] 접근성 고려 (키보드 네비게이션 등)
- [ ] 성능 최적화 (가상화, 비동기 로딩)
- [ ] 오류 상황 적절한 처리
- [ ] 사용자 피드백 즉시 제공

## 📖 관련 문서
- **전체 UI 명세**: [PRD_게임AI음성매크로.md](mdc:PRD_게임AI음성매크로.md) 각 기능별 UI 섹션
- **WPF 프로젝트 설정**: [VoiceMacroPro/VoiceMacroPro.csproj](mdc:VoiceMacroPro/VoiceMacroPro.csproj)
