---
description:
globs:
alwaysApply: false
---
# MSL (Macro Scripting Language) 개발 가이드

## 📖 MSL 소개
MSL은 VoiceMacro Pro의 커스텀 스크립팅 언어로, 게이머가 직관적으로 복잡한 매크로를 작성할 수 있도록 설계되었습니다.

## 🔧 MSL 시스템 아키텍처

### 핵심 컴포넌트
- **어휘 분석기**: [backend/parsers/msl_lexer.py](mdc:backend/parsers/msl_lexer.py) - 스크립트를 토큰으로 분해
- **구문 분석기**: [backend/parsers/msl_parser.py](mdc:backend/parsers/msl_parser.py) - AST 생성 및 문법 검증
- **AST 노드**: [backend/parsers/msl_ast.py](mdc:backend/parsers/msl_ast.py) - 추상 구문 트리 노드 정의
- **인터프리터**: [backend/parsers/msl_interpreter.py](mdc:backend/parsers/msl_interpreter.py) - 스크립트 실행 엔진

## 📝 MSL 문법 규칙

### 기본 연산자

| 연산자 | 설명 | 예시 | 동작 |
|--------|------|------|------|
| `,` | 순차 실행 | `W,A,S,D` | W → A → S → D 순서대로 실행 |
| `+` | 동시 실행 | `W+A+S+D` | W, A, S, D를 동시에 누름 |
| `>` | 홀드 연결 | `W>A>S>D` | W 누르고 유지하면서 A, S, D 순차 실행 |
| `\|` | 병렬 실행 | `W\|A\|S\|D` | 독립적인 4개 스레드로 실행 |
| `~` | 토글 | `~CapsLock` | CapsLock ON/OFF 전환 |
| `*` | 반복 | `W*5` | W키를 5번 반복 |
| `&` | 연속 입력 | `Space&100` | Space를 100ms 간격으로 연속 입력 |

### 타이밍 제어

| 표현 | 설명 | 예시 | 동작 |
|------|------|------|------|
| `(숫자)` | 지연 시간 (ms) | `W(500)A` | W 누르고 500ms 대기 후 A |
| `[숫자]` | 홀드 시간 (ms) | `W[1000]` | W키를 1초간 홀드 |
| `{숫자}` | 반복 간격 (ms) | `W*5{200}` | W키를 200ms 간격으로 5번 |
| `<숫자>` | 페이드 시간 (ms) | `W<100>A` | W에서 A로 100ms에 걸쳐 전환 |

### 고급 기능

| 기능 | 문법 | 예시 | 설명 |
|------|------|------|------|
| **그룹화** | `(...)` | `(W+A),S,D` | W+A를 그룹으로 묶어 순차 실행 |
| **조건부 실행** | `?조건:` | `?HP<50:Heal` | HP가 50% 미만일 때만 힐 실행 |
| **변수 사용** | `$변수명` | `$combo1,W,A` | 미리 정의된 콤보 사용 |
| **마우스 제어** | `@좌표` | `@(100,200)` | 마우스를 (100,200) 좌표로 이동 |
| **휠 제어** | `wheel+/-` | `wheel+3` | 마우스 휠 3번 위로 스크롤 |

## 🧪 MSL 개발 및 테스트

### 파서 테스트
```python
# MSL 스크립트 파싱 테스트 예시
from backend.parsers.msl_parser import MSLParser

parser = MSLParser()
script = "W,A,S,D"
ast = parser.parse(script)
```

### 실행 테스트
```python
# MSL 스크립트 실행 테스트
from backend.parsers.msl_interpreter import MSLInterpreter

interpreter = MSLInterpreter()
interpreter.execute(ast)
```

### 테스트 파일들
- [backend/tests/test_msl_complete.py](mdc:backend/tests/test_msl_complete.py) - 전체 MSL 기능 테스트
- [backend/tests/test_msl_specific.py](mdc:backend/tests/test_msl_specific.py) - 특정 기능 테스트
- [backend/tests/test_working_msl.py](mdc:backend/tests/test_working_msl.py) - 동작 확인 테스트

## 🎯 MSL 사용 예시

### 기본 예시
```msl
# 순차적으로 키 누르기
W,A,S,D

# 동시에 키 누르기  
W+A+S+D

# 지연 시간을 포함한 콤보
Q(100)W(150)E(200)R

# 키를 홀드하면서 다른 키 실행
Shift[2000]+(W,A,S,D)

# 반복 실행
Space*10{50}
```

### 고급 예시
```msl
# 복합 콤보 (격투 게임)
Down+Forward,Punch(50)Kick(100)*3

# MMO 스킬 로테이션
Skill1(1000)Skill2(800)Skill3(1200)Buff

# 조건부 실행
?MP>80:FireBall,?MP<20:ManaPotion

# 토글 기능
~CapsLock,(W,A,S,D),~CapsLock
```

## ⚠️ MSL 개발 주의사항

### 현재 지원 현황
- ✅ 기본 연산자: `,`, `+`, `*`, `()`, `[]` 
- ✅ 단순 키 입력 및 시퀀스
- ⚠️ 부분 지원: `>`, `|`, `~`, `&`
- ❌ 미구현: 조건부 실행(`?`), 변수(`$`), 마우스 제어(`@`)

### 개발 우선순위
1. 토글(`~`) 연산자 완성
2. 병렬 실행(`|`) 최적화
3. 조건부 실행(`?`) 구현
4. 변수 시스템(`$`) 구현
5. 마우스 제어(`@`) 추가

## 🔍 디버깅 가이드

### 파싱 오류 해결
- 토큰화 문제: [backend/parsers/msl_lexer.py](mdc:backend/parsers/msl_lexer.py) 확인
- 구문 오류: [backend/parsers/msl_parser.py](mdc:backend/parsers/msl_parser.py) 확인
- AST 구조: [backend/parsers/msl_ast.py](mdc:backend/parsers/msl_ast.py) 확인

### 실행 오류 해결  
- 실행 로직: [backend/parsers/msl_interpreter.py](mdc:backend/parsers/msl_interpreter.py) 확인
- 키 입력 오류: PyAutoGUI 설정 확인
- 타이밍 문제: 딜레이 및 홀드 시간 조정

## 📚 관련 문서
- MSL 전체 명세: [PRD_게임AI음성매크로.md](mdc:PRD_게임AI음성매크로.md) 섹션 3.6
- UI 연동: [VoiceMacroPro/Views/CustomScriptingView.xaml](mdc:VoiceMacroPro/Views/CustomScriptingView.xaml)
